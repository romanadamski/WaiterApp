#pragma checksum "C:\Users\rada\Desktop\eLeader\Waiter__ASP.Net\Waiter__ASP.Net\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c178ded150e6a08f92cbbe5570da75228ce6de5b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\rada\Desktop\eLeader\Waiter__ASP.Net\Waiter__ASP.Net\Views\_ViewImports.cshtml"
using Waiter__ASP.Net;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\rada\Desktop\eLeader\Waiter__ASP.Net\Waiter__ASP.Net\Views\_ViewImports.cshtml"
using Waiter__ASP.Net.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c178ded150e6a08f92cbbe5570da75228ce6de5b", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f6b1f68128fcda057f782b5f9824d372557f1c7d", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "table_1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "table_2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "table_3", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "table_4", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "table_5", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "table_6", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "table_7", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "table_8", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "table_9", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "table_10", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\rada\Desktop\eLeader\Waiter__ASP.Net\Waiter__ASP.Net\Views\Home\Index.cshtml"
  
    ViewBag.Title = "Restauracja";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<style>
    .scroll {
        height: 400px;
        overflow: scroll;
        overflow-x: hidden;
        border: 1px solid #888;
        background-color: lightgray;
    }

    table {
        font-family: arial, sans-serif;
        width: 100%;
    }

    td, th {
        text-align: left;
        padding: 8px;
    }
    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.3); /* Black w/ opacity */
    }

    .modal-content {
        background-color: lightgray;
        margin: 15% auto;
        padding: 20px;
        border: 3px solid #888;
        width: 80%;
    }
    /* The Close Button */");
            WriteLiteral(@"
    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }
</style>
<div class=""row"">
    <label class=""font-weight-bold"">Wybierz stolik:</label>
</div>
<div class=""row"">
    <select id=""tables"" onchange=""setTableValue(this.options[this.selectedIndex].value); setTableLabel(this.options[this.selectedIndex].label); getDishes(actualTableValue);"">
        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c178ded150e6a08f92cbbe5570da75228ce6de5b7761", async() => {
                WriteLiteral("Stolik 1");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c178ded150e6a08f92cbbe5570da75228ce6de5b8930", async() => {
                WriteLiteral("Stolik 2");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c178ded150e6a08f92cbbe5570da75228ce6de5b10099", async() => {
                WriteLiteral("Stolik 3");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c178ded150e6a08f92cbbe5570da75228ce6de5b11269", async() => {
                WriteLiteral("Stolik 4");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c178ded150e6a08f92cbbe5570da75228ce6de5b12439", async() => {
                WriteLiteral("Stolik 5");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c178ded150e6a08f92cbbe5570da75228ce6de5b13609", async() => {
                WriteLiteral("Stolik 6");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c178ded150e6a08f92cbbe5570da75228ce6de5b14779", async() => {
                WriteLiteral("Stolik 7");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c178ded150e6a08f92cbbe5570da75228ce6de5b15949", async() => {
                WriteLiteral("Stolik 8");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c178ded150e6a08f92cbbe5570da75228ce6de5b17119", async() => {
                WriteLiteral("Stolik 9");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c178ded150e6a08f92cbbe5570da75228ce6de5b18289", async() => {
                WriteLiteral("Stolik 10");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    </select>
    <button id=""button_addDishes"">Dodaj dania</button>
</div>
<div class=""scroll"">
    <table id=""orderT""></table>
</div>
<div class=""scroll"">
    <div class=""bg-dark"">
        <label id=""tableNameDishesByTableT"" style=""color:lightgray"" class=""font-weight-bold""></label>
    </div>
    <table id=""dishesByTableT""></table>
</div>
<button id=""button_pay"">Zapłać</button>
<div id=""dishesList"" class=""modal"">
    <div class=""modal-content"">
        <span class=""close"">&times;</span>
        <label id=""tableNameDishesT"" class=""font-weight-bold""></label>
        <table id=""dishesT"">
            <tr>
                <td>Nazwa</td>
                <td>Ilość</td>
                <td>Cena</td>
                <td>Suma</td>
                <td>Dodaj</td>
            </tr>
        </table>
    </div>
</div>
<div id=""payList"" class=""modal"">
    <div class=""modal-content"">
        <label id=""tableNamePayListT"" class=""font-weight-bold""></label>
        <table id=""payListT""></table>");
            WriteLiteral("\r\n        <label id=\"sumPayListT\" class=\"font-weight-bold\"></label>\r\n    </div>\r\n</div>\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>
        var btn = document.getElementById(""button_addDishes"");
        var btn_pay = document.getElementById(""button_pay"");

        var modal = document.getElementById(""dishesList"");
        var span = document.getElementsByClassName(""close"")[0];

        var modal_pay = document.getElementById(""payList"");
        btn.onclick = function () {
            modal.style.display = ""block"";
            document.getElementById('tableNameDishesT').innerText = actualTableLabel;
            var dishesT = document.getElementById('dishesT');
            for (let row of dishesT.rows) {
                for (let cell of row.cells) {
                    if (cell.firstChild.localName == ""input"") {
                        cell.firstChild.value = 1;
                    }
                }
            }
        }
        btn_pay.onclick = function pay() {
            modal_pay.style.display = ""block"";
            document.getElementById('tableNamePayListT').innerText = actualTableLabel;
    ");
                WriteLiteral(@"        $.ajax({
                type: ""GET"",
                url: ""/Home/GetRecipe?tableName="" + actualTableValue,
                contentType: ""application/json; charset=utf-8"",
                dataType: ""json"",
                success: function (response) {
                    var dataObject = JSON.parse(response);
                    var Parent = document.getElementById('payListT');
                    while (Parent.hasChildNodes()) {
                        Parent.removeChild(Parent.firstChild);
                    }
                    addHead_payListT();
                    dataObject.OrderedDishes.forEach(fillRecipView);
                    var tip = dataObject.TotalPrice * 0.05;
                    var sum = dataObject.TotalPrice + tip;
                    addTip_payListT(tip.toFixed(2));
                    document.getElementById('sumPayListT').innerText ='Suma: ' + sum.toFixed(2) + ' $';
                },
                error: function () {
                    console.log(""błą");
                WriteLiteral(@"d"");
                }
            });
            function fillRecipView(item, index) {
                addRow_payListT(item)
            }
        }
        function fillListOfDishes() {
            var responsedJson;
            $.ajax({
                type: ""GET"",
                url: ""/Home/LoadListOfDishes"",
                contentType: ""application/json; charset=utf-8"",
                dataType: ""json"",
                success: function (response) {
                    responsedJson = response;
                    var dataObject = JSON.parse(responsedJson);
                    dataObject.forEach(fillDishesView);
                },
                error: function () {
                    console.log(""błąd"");
                }
            });
            function fillDishesView(item, index) {
                addRow_DishesT(item)
            }
        }
        span.onclick = function () {
            modal.style.display = ""none"";
            modal_pay.style.display = ""none"";");
                WriteLiteral(@"
        }
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = ""none"";
            }
            if (event.target == modal_pay) {
                modal_pay.style.display = ""none"";
            }
        }
        var actualTableValue;
        var actualTableLabel;
        var actualTableNumber;
        window.onload = function () {
            addHead_OrderT();
            loadTables(10);
            actualTableValue = document.getElementById('tables').options[0].value;
            actualTableLabel = document.getElementById('tables').options[0].label;
            loadDishesByTableT();
            getDishes(actualTableValue);
        }
        function loadDishesByTableT() {
            document.getElementById('tableNameDishesByTableT').innerText = actualTableLabel;
        }
        function addHead_payListT() {
            $('#payListT').append('<tr></tr>');
            var $lastTr = $('#payListT tr:last');
     ");
                WriteLiteral(@"       $lastTr.append('<td><label class=""font-weight-bold"">Nazwa</label></td>');
            $lastTr.append('<td><label class=""font-weight-bold"">Ilość</label></td>');
            $lastTr.append('<td><label class=""font-weight-bold"">Cena</label></td>');
            $lastTr.append('<td><label class=""font-weight-bold"">Cena łączna</label></td>');
        }
        function addRow_payListT(item) {
            $('#payListT').append('<tr></tr>');
            var $lastTr = $('#payListT tr:last');
            $lastTr.append('<td><label>' + item.Dish.Name + '</label></td>');
            $lastTr.append('<td><label>' + item.Amount + '</label></td>');
            $lastTr.append('<td><label>' + item.Dish.Price  + ' $' + '</label></td>');
            $lastTr.append('<td><label>' + item.TotalPrice + ' $' + '</label></td>');
        }
        function addTip_payListT(tip) {
            $('#payListT').append('<tr></tr>');
            var $lastTr = $('#payListT tr:last');
            $lastTr.append('<td><label>Na");
                WriteLiteral(@"piwek 5%: '+ tip +'$ </label></td>');
            $lastTr.append('<td><label></label></td>');
            $lastTr.append('<td><label></label></td>');
            $lastTr.append('<td><label></label></td>');
        }
        function addRow_DishesT(item) {
            $('#dishesT').append('<tr></tr>');
            var $lastTr = $('table tr:last');
            $lastTr.append('<td><label>' + item.Name + '</label></td>');
            $lastTr.append('<td><input type=""number"" id=""dishes_input_' + item.Name + '"" min=""1"" max=""100""></input></td>');
            $lastTr.append('<td><label id = ""label_price_' + item.Name + '"">' + item.Price + ' $</label></td>');
            $lastTr.append('<td><label id = ""label_total_' + item.Name + '"">' + item.Price + ' $</label></td>');
            $lastTr.append('<td><button id = ""addOrder_' + item.Name + '"">Dodaj</button></td>');
            document.getElementById('addOrder_' + item.Name).onclick = function () {
                var name = item.Name;
                v");
                WriteLiteral(@"ar amount = document.getElementById('dishes_input_' + item.Name).value;
                if (amount > 0 && amount <= 100)
                    addDishToTable(name, amount);
            }
            document.getElementById('dishes_input_' + item.Name).onchange = function () {
                var amount = document.getElementById('dishes_input_' + item.Name).value;
                var price = document.getElementById('label_price_' + item.Name).innerText;
                var total = parseFloat(amount) * parseFloat(price);
                document.getElementById('label_total_' + item.Name).innerText = total + ' $';
            }
        }
        function addDishToTable(name, amount) {
            $.ajax({
                type: ""GET"",
                url: ""/Home/AddDishToTable?tableName="" + actualTableValue + ""&dishName="" + name + ""&amount="" + amount,
                contentType: ""application/json; charset=utf-8"",
                dataType: ""json"",
                success: function (response) {
   ");
                WriteLiteral(@"                 if (response.isTableInOrders == false) {
                        addRow_OrderT(actualTableLabel, response.totalPrice, actualTableValue)
                    }
                    else {
                        var mytab1 = document.getElementById('orderT');
                        for (let row of mytab1.rows) {
                            if (row.cells[0].innerText == actualTableLabel) {
                                row.cells[1].innerText = response.totalPrice + ' $';
                            }
                        }
                    }
                    getDishes(actualTableValue);
                },
                error: function () {
                    console.log(""błąd"");
                }
            });
        }
        function addHead_OrderT() {
            $('#orderT').append('<tr></tr>');
            var $lastTr = $('#orderT tr:last');
            $lastTr.append('<td><label class=""font-weight-bold"">Nazwa</label></td>');
            $lastTr.append");
                WriteLiteral(@"('<td><label class=""font-weight-bold"">Cena</label></td>');
            $lastTr.append('<td><label class=""font-weight-bold"">Usuń</label></td>');
        }
        function addRow_OrderT(name, price, value) {
            $('#orderT').append('<tr ></tr>');
            var $lastTr = $('#orderT tr:last');
            $lastTr.append('<td><label id=""tableName"">' + name + '</label></td>')
            $lastTr.append('<td><label id=""orderPrice"">' + price + ' $</label></td>')
            $lastTr.append('<td><button id=""deleteOrder_' + name + '"">Usuń</label></td>')
            document.getElementById('deleteOrder_' + name).onclick = function () {
                $.ajax({
                    type: ""GET"",
                    url: ""/Home/DeleteOrder?tableName="" + value,
                    contentType: ""application/json; charset=utf-8"",
                    dataType: ""json"",
                    success: function (response) {
                        var mytab1 = document.getElementById('orderT');
            ");
                WriteLiteral(@"            for (let row of mytab1.rows) {
                            if (row.cells[0].innerText == name) {
                                row.remove();
                            }
                        }
                        if (name == actualTableLabel)
                            getDishes(actualTableValue);
                    },
                    error: function () {
                        console.log(""błąd"");
                    }
                });
            }
        }
        function addHead_dishesByTableT() {
            $('#dishesByTableT').append('<tr></tr>');
            var $lastTr = $('#dishesByTableT tr:last');
            $lastTr.append('<td><label class=""font-weight-bold"">Nazwa</label></td>');
            $lastTr.append('<td><label class=""font-weight-bold"">Ilość</label></td>');
            $lastTr.append('<td><label class=""font-weight-bold"">Zmień</label></td>');
            $lastTr.append('<td><label class=""font-weight-bold"">Usuń</label></td>');
        }");
                WriteLiteral(@"
        function addRow_DishesByTableT(name, amount) {
            $('#dishesByTableT').append('<tr></tr>');
            var $lastTr = $('#dishesByTableT tr:last');
            $lastTr.append('<td><label id=""dishName"">' + name + '</label></td>')
            $lastTr.append('<td><input type=""number"" id=""dishesByTable_input_' + name + '"" min=""1"" max=""100"" value=' + amount + '></input></td>')
            $lastTr.append('<td><button id=""changeDish_' + name + '"">Zmień</button></td>')
            $lastTr.append('<td><button id=""deleteDish_' + name + '"">Usuń</button></td>')
            document.getElementById('changeDish_' + name).onclick = function () {
                var amount = document.getElementById('dishesByTable_input_' + name).value;
                if (amount > 0 && amount <= 100)
                    changeDishToTable(name, amount);
            }
            document.getElementById('deleteDish_' + name).onclick = function () {
                $.ajax({
                    type: ""GET"",
     ");
                WriteLiteral(@"               url: ""/Home/DeleteDishByTable?tableName="" + actualTableValue + ""&dishName="" + name,
                    contentType: ""application/json; charset=utf-8"",
                    dataType: ""json"",
                    success: function (response) {
                        if (response.text == ""success"") {
                            var mytab1 = document.getElementById('orderT');
                            if (response.isTableInOrders == false) {
                                for (let row of mytab1.rows) {
                                    if (row.cells[0].innerText == actualTableLabel) {
                                        row.remove();
                                    }
                                }
                            }
                            else {
                                for (let row of mytab1.rows) {
                                    if (row.cells[0].innerText == actualTableLabel) {
                                        row.cells[1].innerTe");
                WriteLiteral(@"xt = response.totalPrice + ' $';
                                    }
                                }
                            }
                            getDishes(actualTableValue);
                        }
                    },
                    error: function () {
                        console.log(""błąd"");
                    }
                });
            }
        }
        function changeDishToTable(name, amount) {
            $.ajax({
                type: ""GET"",
                url: ""/Home/ChangeDishToTable?tableName="" + actualTableValue + ""&dishName="" + name + ""&amount="" + amount,
                contentType: ""application/json; charset=utf-8"",
                dataType: ""json"",
                success: function (response) {
                    if (response.isTableInOrders == false) {
                        addRow_OrderT(actualTableLabel, response.totalPrice, actualTableValue)
                    }
                    else {
                        var mytab1");
                WriteLiteral(@" = document.getElementById('orderT');
                        for (let row of mytab1.rows) {
                            if (row.cells[0].innerText == actualTableLabel) {
                                row.cells[1].innerText = response.totalPrice + ' $';
                            }
                        }
                    }
                    getDishes(actualTableValue);
                },
                error: function () {
                    console.log(""błąd"");
                }
            });
        }
        function loadTables(tableAmount) {
            $.ajax({
                type: ""GET"",
                url: ""/Home/LoadRestaurationData?tableAmount="" + tableAmount,
                contentType: ""application/json; charset=utf-8"",
                dataType: ""json"",
                success: function () {
                    fillListOfDishes();
                },
                error: function () {
                    console.log(""błąd"");
                }
           ");
                WriteLiteral(@" });
        }
        function setTableValue(selectObject) {
            actualTableValue = selectObject;
        }
        function setTableLabel(selectObject) {
            actualTableLabel = selectObject;
        }
        function getDishes(selectObject) {
            loadDishesByTableT();
            var Parent = document.getElementById('dishesByTableT');
            while (Parent.hasChildNodes()) {
                Parent.removeChild(Parent.firstChild);
            }
            addHead_dishesByTableT();
            $.ajax({
                type: ""GET"",
                url: ""/Home/GetDishesByTable?tableName="" + selectObject,
                contentType: ""application/json; charset=utf-8"",
                dataType: ""json"",
                success: function (response) {
                    if (response.text == ""success"") {
                        var responsedJson = response.json;
                        var dataObject = JSON.parse(responsedJson);
                        dataObject.");
                WriteLiteral(@"forEach(fillDishesByTableView);
                    }
                },
                error: function () {
                    console.log(""błąd"");
                }
            });
            function fillDishesByTableView(item, index) {
                addRow_DishesByTableT(item.Dish.Name, item.Amount);
            }
        }

    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
